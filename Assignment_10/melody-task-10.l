; Task 10: Crossover
(setf *crossover-demo* nil)

(defconstant *percent-crossover* 60)

(defmethod perform-crossover((old collection) (new collection))
	(dotimes (i (number-of-crossovers))
		(perform-one-crossover old new)
	)
)

(defmethod number-of-crossovers()
	(* (/ *percent-crossover* 100) *collection-size*)
)

(defmethod perform-one-crossover((old collection) (new collection))
	(let (mother father m mm new-m)
		(setf mother (select-melody old))
		(setf father (select-melody old))
		(setf m (crossover mother father))
		(setf mm (maybe-mutate m))
		(setf new-m (new-melody (+ 1 (size new)) (melody-notes mm)))
		(setf 
			(collection-melodies new) 
			(append (collection-melodies new) (list new-m))
		)
		(if *crossover-demo* (crossover-demo-helper mother father m mm new-m))
	)
	nil
)

(defmethod crossover-demo-helper((mother melody) (father melody) (m melody) (mm melody) (new-m melody))
	(format t "Selected mother = ~%")
	(display mother)
	(terpri)
	(format t "Selected father = ~%")
	(display father)
	(terpri)
	(format t "The crossover = ~%")
	(display m)
	(terpri)
	(format t "The possibly mutated individual = ~%")
	(display mm)
	(terpri)
	(format t "The renumbered individual = ~%")
	(display new-m)
	(terpri)
)

(defmethod crossover((mother melody) (father melody) &aux m-notes f-notes new-notes)
	(setf m-notes (melody-notes mother))
	(setf f-notes (melody-notes father))
	(setf new-notes (crossover m-notes f-notes))
	(new-melody 0 new-notes)
)

(defmethod perform-crossover-demo(&aux old new)
	(setf old (initial-collection))
	(setf new (empty-collection old))
	(format t "-------------------------------------------------------------------------~%~%")
	(display new)
	(format t "~%~%-------------------------------------------------------------------------~%")
	(setf *select-demo* t)
	(setf *crossover-demo* t)
	(dotimes(i 10)
		(perform-one-crossover old new)
		(format t "-------------------------------------------------------------------------~%~%")
		(display new)
		(format t "~%~%-------------------------------------------------------------------------~%")
	)
	(setf *select-demo* nil)
	(setf *crossover-demo* nil)
	nil
)